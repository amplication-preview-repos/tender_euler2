/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TripService } from "../trip.service";
import { TripCreateInput } from "./TripCreateInput";
import { Trip } from "./Trip";
import { TripFindManyArgs } from "./TripFindManyArgs";
import { TripWhereUniqueInput } from "./TripWhereUniqueInput";
import { TripUpdateInput } from "./TripUpdateInput";

export class TripControllerBase {
  constructor(protected readonly service: TripService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Trip })
  async createTrip(@common.Body() data: TripCreateInput): Promise<Trip> {
    return await this.service.createTrip({
      data: {
        ...data,

        truck: data.truck
          ? {
              connect: data.truck,
            }
          : undefined,

        driver: data.driver
          ? {
              connect: data.driver,
            }
          : undefined,

        route: data.route
          ? {
              connect: data.route,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tripId: true,
        departureTime: true,
        arrivalTime: true,

        truck: {
          select: {
            id: true,
          },
        },

        driver: {
          select: {
            id: true,
          },
        },

        route: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Trip] })
  @ApiNestedQuery(TripFindManyArgs)
  async trips(@common.Req() request: Request): Promise<Trip[]> {
    const args = plainToClass(TripFindManyArgs, request.query);
    return this.service.trips({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tripId: true,
        departureTime: true,
        arrivalTime: true,

        truck: {
          select: {
            id: true,
          },
        },

        driver: {
          select: {
            id: true,
          },
        },

        route: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Trip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trip(
    @common.Param() params: TripWhereUniqueInput
  ): Promise<Trip | null> {
    const result = await this.service.trip({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tripId: true,
        departureTime: true,
        arrivalTime: true,

        truck: {
          select: {
            id: true,
          },
        },

        driver: {
          select: {
            id: true,
          },
        },

        route: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Trip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrip(
    @common.Param() params: TripWhereUniqueInput,
    @common.Body() data: TripUpdateInput
  ): Promise<Trip | null> {
    try {
      return await this.service.updateTrip({
        where: params,
        data: {
          ...data,

          truck: data.truck
            ? {
                connect: data.truck,
              }
            : undefined,

          driver: data.driver
            ? {
                connect: data.driver,
              }
            : undefined,

          route: data.route
            ? {
                connect: data.route,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tripId: true,
          departureTime: true,
          arrivalTime: true,

          truck: {
            select: {
              id: true,
            },
          },

          driver: {
            select: {
              id: true,
            },
          },

          route: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Trip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrip(
    @common.Param() params: TripWhereUniqueInput
  ): Promise<Trip | null> {
    try {
      return await this.service.deleteTrip({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tripId: true,
          departureTime: true,
          arrivalTime: true,

          truck: {
            select: {
              id: true,
            },
          },

          driver: {
            select: {
              id: true,
            },
          },

          route: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
