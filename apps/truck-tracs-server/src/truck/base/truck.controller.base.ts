/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TruckService } from "../truck.service";
import { TruckCreateInput } from "./TruckCreateInput";
import { Truck } from "./Truck";
import { TruckFindManyArgs } from "./TruckFindManyArgs";
import { TruckWhereUniqueInput } from "./TruckWhereUniqueInput";
import { TruckUpdateInput } from "./TruckUpdateInput";
import { TripFindManyArgs } from "../../trip/base/TripFindManyArgs";
import { Trip } from "../../trip/base/Trip";
import { TripWhereUniqueInput } from "../../trip/base/TripWhereUniqueInput";

export class TruckControllerBase {
  constructor(protected readonly service: TruckService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Truck })
  async createTruck(@common.Body() data: TruckCreateInput): Promise<Truck> {
    return await this.service.createTruck({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        model: true,
        licensePlate: true,
        status: true,
        truckId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Truck] })
  @ApiNestedQuery(TruckFindManyArgs)
  async trucks(@common.Req() request: Request): Promise<Truck[]> {
    const args = plainToClass(TruckFindManyArgs, request.query);
    return this.service.trucks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        model: true,
        licensePlate: true,
        status: true,
        truckId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async truck(
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Truck | null> {
    const result = await this.service.truck({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        model: true,
        licensePlate: true,
        status: true,
        truckId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTruck(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() data: TruckUpdateInput
  ): Promise<Truck | null> {
    try {
      return await this.service.updateTruck({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          model: true,
          licensePlate: true,
          status: true,
          truckId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Truck })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTruck(
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Truck | null> {
    try {
      return await this.service.deleteTruck({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          model: true,
          licensePlate: true,
          status: true,
          truckId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/trips")
  @ApiNestedQuery(TripFindManyArgs)
  async findTrips(
    @common.Req() request: Request,
    @common.Param() params: TruckWhereUniqueInput
  ): Promise<Trip[]> {
    const query = plainToClass(TripFindManyArgs, request.query);
    const results = await this.service.findTrips(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tripId: true,
        departureTime: true,
        arrivalTime: true,

        truck: {
          select: {
            id: true,
          },
        },

        driver: {
          select: {
            id: true,
          },
        },

        route: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/trips")
  async connectTrips(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: TripWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trips: {
        connect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/trips")
  async updateTrips(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: TripWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trips: {
        set: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/trips")
  async disconnectTrips(
    @common.Param() params: TruckWhereUniqueInput,
    @common.Body() body: TripWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trips: {
        disconnect: body,
      },
    };
    await this.service.updateTruck({
      where: params,
      data,
      select: { id: true },
    });
  }
}
