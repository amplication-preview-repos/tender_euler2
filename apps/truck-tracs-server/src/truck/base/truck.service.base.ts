/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Truck as PrismaTruck,
  Trip as PrismaTrip,
} from "@prisma/client";

export class TruckServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TruckCountArgs, "select">): Promise<number> {
    return this.prisma.truck.count(args);
  }

  async trucks(args: Prisma.TruckFindManyArgs): Promise<PrismaTruck[]> {
    return this.prisma.truck.findMany(args);
  }
  async truck(args: Prisma.TruckFindUniqueArgs): Promise<PrismaTruck | null> {
    return this.prisma.truck.findUnique(args);
  }
  async createTruck(args: Prisma.TruckCreateArgs): Promise<PrismaTruck> {
    return this.prisma.truck.create(args);
  }
  async updateTruck(args: Prisma.TruckUpdateArgs): Promise<PrismaTruck> {
    return this.prisma.truck.update(args);
  }
  async deleteTruck(args: Prisma.TruckDeleteArgs): Promise<PrismaTruck> {
    return this.prisma.truck.delete(args);
  }

  async findTrips(
    parentId: string,
    args: Prisma.TripFindManyArgs
  ): Promise<PrismaTrip[]> {
    return this.prisma.truck
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .trips(args);
  }
}
